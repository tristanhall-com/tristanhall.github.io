
// The prefixed support threshold for box-shadow.
// Defaults to the $graceful-usage-threshold.
$box-shadow-support-threshold: 0 !default;


// The default color for box shadows
$default-box-shadow-color: #333333 !default;

// The default horizontal offset. Positive is to the right.
$default-box-shadow-h-offset: 0px !default;

// The default vertical offset. Positive is down.
$default-box-shadow-v-offset: 0px !default;

// The default blur length.
$default-box-shadow-blur: 5px !default;

// The default spread length.
$default-box-shadow-spread: null !default;

// The default shadow inset: inset or null (for standard shadow).
$default-box-shadow-inset: null !default;

@function default-box-shadow() {
  @return compact(if($default-box-shadow-inset, inset, null)
                  $default-box-shadow-h-offset
                  $default-box-shadow-v-offset
                  $default-box-shadow-blur
                  $default-box-shadow-spread
                  $default-box-shadow-color);
}

// Provides cross-browser for Webkit, Gecko, and CSS3 box shadows
// when one or more box shadows are needed.
// Each shadow argument should adhere to the standard css3 syntax
// for the box-shadow property.
@mixin box-shadow($shadow...) {
  $shadow: set-arglist-default($shadow, default-box-shadow());
}

// Provides a single cross-browser CSS box shadow for Webkit, Gecko, and CSS3.
// Includes default arguments for color, horizontal offset, vertical offset, blur length, spread length, and inset.
@mixin single-box-shadow(
  $hoff   : null,
  $voff   : null,
  $blur   : null,
  $spread : null,
  $color  : null,
  $inset  : $default-box-shadow-inset
) {
  // Handle legacy argument order
  @if not ($hoff == none or $hoff == null) and type-of($hoff) != number {
    @warn "The $color argument for single-box-shadow is now the 5th argument instead of the 1st.";
    $tmp-color: $color;
    $color: $hoff;
    $hoff: $voff;
    $voff: $blur;
    $blur: $spread;
    $spread: $tmp-color
  }

  // Need to set these defaults here instead of the arglist to support the above backwards compat handling
  @if $hoff   == null { $hoff:   $default-box-shadow-h-offset; }
  @if $voff   == null { $hoff:   $default-box-shadow-v-offset; }
  @if $blur   == null { $blur:   $default-box-shadow-blur;     }
  @if $spread == null { $spread: $default-box-shadow-spread;   }
  @if $color  == null { $color:  $default-box-shadow-color;    }

  @if not ($inset == true or $inset == false or $inset == null or $inset == inset) {
    @warn "$inset expected to be true or the inset keyword. Got #{$inset} instead. Using: inset";
  }

  @if $hoff == none {
    @include box-shadow(none);
  } @else {
    $full   : $hoff $voff;
    @if $blur   { $full: $full $blur;   }
    @if $spread { $full: $full $spread; }
    @if $color  { $full: $full $color;  }
    @if $inset  { $full: inset $full;   }
    @include box-shadow($full);
  }
}
.label-switch {
   $switch-width: 52px;
   $switch-padding: 2px;
   $switch-height: 32px;
   $switch-radius: $switch-height;
   $knob-height: $switch-height - ($switch-padding * 2);
   $knob-width: $knob-height;
   $knob-radius: $switch-height - ($switch-padding * 2);
   
   align-self: center;
   border-radius: $switch-radius;
   cursor: pointer;
   display: inline-block;
   height: $switch-height;
   position: relative;
   vertical-align: middle;
   width: $switch-width;
   @include box-sizing(border-box);
   
   input[type="checkbox"] {
      display: none;
      
      + .checkbox {
         background: #e5e5e5;
         border: none;
         border-radius: $switch-radius;
         cursor: pointer;
         height: $switch-height;
         margin: 0;
         padding: 0;
         position: relative;
         width: $switch-width;
         z-index: 0;
         @include box-sizing(border-box);
         @include transition(all 0.3s ease);
         
         &:before {
            background: white;
            border-radius: $switch-radius;
            content: ' ';
            height: $knob-radius;
            width: $switch-width - ($switch-padding * 2);
            z-index: 1;
            @include box-sizing(border-box);
            @include position(absolute, 2px 0 0 2px);
            @include transition(all 0.3s ease);
            @include transform(scale(1));
         }
         
         &:after {
            background: white;
            border-radius: $knob-radius;
            content: ' ';
            height: $knob-height;
            width: $knob-width;
            z-index: 2;
            @include box-shadow(0 2px 5px rgba(0,0,0,0.4));
            @include position(absolute, 2px 0 0 2px);
            @include transition(all 0.3s ease);
         }
      }
      
      &:checked {
         + .checkbox {
            background: $blue;
            
            &:before {
               @include transform(scale(0));
            }
            
            &:after {
               left: $switch-width - $knob-width - ($switch-padding);
            }
         }
      }
   }
}